<!DOCTYPE html>
<html lang="en">
<head>
    <title>Admin Dashboard</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css">
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <h3>Admin Dashboard</h3>
    <h2>Find Possible Latitude and Longitude</h2>
    <div>
        <label for="lat1">Latitude of Point 1: </label>
        <input type="number" id="lat1" step="any" required>
        <label for="lng1">Longitude of Point 1: </label>
        <input type="number" id="lng1" step="any" required>
    </div>
    <div>
        <label for="lat2">Latitude of Point 2: </label>
        <input type="number" id="lat2" step="any" required>
        <label for="lng2">Longitude of Point 2: </label>
        <input type="number" id="lng2" step="any" required>
    </div>
    <div>
        <label for="d1">Distance from Point 1 (in km): </label>
        <input type="number" id="d1" step="any" required>
        <label for="d2">Distance from Point 2 (in km): </label>
        <input type="number" id="d2" step="any" required>
    </div>
    <button onclick="calculatePoints()">Find Points</button>
    <h3>Possible Coordinates:</h3>
    <div id="results"></div>
    <form action="/admin/add" method="POST">
        <input type="text" name="sensorId" placeholder="Sensor ID" required>
        <input type="number" name="lat" placeholder="Latitude" step="0.000001" required>
        <input type="number" name="lng" placeholder="Longitude" step="0.000001" required>
        <select name="type" required>
            <option value="" disabled selected>Select Type</option>
            <option value="A">A</option>
            <option value="K">K</option>
        </select>
        <button type="submit">Add Sensor</button>
    </form>

    <br>
    <!-- Button with onclick -->
     <form action="/admin/hardreset/" method="POST">
        <button type="submit">Hard Reset All Sensors</button>
     </form>
    <br>
    
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Location</th>
                <th>Type</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% sensors.forEach(sensor => { %>
                <tr>
                    <td><%= sensor.sensorId %></td>
                    <td><%= sensor.location.lat %>, <%= sensor.location.lng %></td>
                    <td><%= sensor.type %></td>
                    <td>
                        <form action="/admin/update/<%= sensor.id %>" method="POST">
                            <input type="text" name="name" value="<%= sensor.sensorId %>" required>
                            <input type="number" name="lat" value="<%= sensor.location.lat %>" step="0.000001" required>
                            <input type="number" name="lng" value="<%= sensor.location.lng %>" step="0.000001" required>
                            <select name="type" required>
                                <option value="A" <%= sensor.type === "A" ? "selected" : "" %>>A</option>
                                <option value="K" <%= sensor.type === "K" ? "selected" : "" %>>K</option>
                            </select>
                            <button type="submit">Update</button>
                        </form>
    
                        <form action="/admin/delete/<%= sensor.id %>" method="POST" style="display: inline;">
                            <button type="submit" onclick="return confirm('Are you sure you want to delete this sensor?')">Delete</button>
                        </form>
                        <form action="/admin/softreset/<%= sensor.sensorId %>" method="POST" style="display: inline;">
                            <button type="submit" onclick="return confirm('Are you sure you want to delete all datas of this sensor?')">Soft Reset</button>
                        </form>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>

    
    <div id="map" style="height: 300px; width: 50%;"></div>
    <h3>Live Leak List</h3>
  <ul id="device-list"></ul>

  <label class="switch">
    <input type="checkbox" id="toggleButton">
    <span class="slider"></span>
  </label>
  <h3>History Leakage Data</h3>
  <div id="hist">
    <ul id="device-hist-list"></ul>
    <label for="date-filter">Filter by Date:</label>
    <input type="date" id="date-filter">
    <button id="download-csv">Download CSV</button>
  </div>

    <script>



        // Function to generate the text representation of arrays
        function generateLists(arrays) {
            // Create an array to store the text representation of each array
            const listText = [];

            // Loop through each array in the input
            for (const array of arrays) {
                // Join the elements of each array into a string separated by commas
                const listString = array.join(', ');
                // Add the generated string to the listText array
                listText.push(listString);
            }

            // Return the list of generated text strings
            return listText;
        }


function toRadians(degrees) {
            return degrees * Math.PI / 180;
        }

        function toDegrees(radians) {
            return radians * 180 / Math.PI;
        }

        function haversineFormula(lat1, lng1, lat2, lng2) {
            const R = 6371; // Earth's radius in km
            const dLat = toRadians(lat2 - lat1);
            const dLng = toRadians(lng2 - lng1);
            const a = Math.sin(dLat / 2) ** 2 + Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) * Math.sin(dLng / 2) ** 2;
            return 2 * R * Math.asin(Math.sqrt(a));
        }

        function calculatePoints() {
            const lat1 = parseFloat(document.getElementById('lat1').value);
            const lng1 = parseFloat(document.getElementById('lng1').value);
            const lat2 = parseFloat(document.getElementById('lat2').value);
            const lng2 = parseFloat(document.getElementById('lng2').value);
            const d1 = parseFloat(document.getElementById('d1').value);
            const d2 = parseFloat(document.getElementById('d2').value);

            const R = 6371; // Earth's radius in km

            const dLat = toRadians(lat2 - lat1);
            const dLng = toRadians(lng2 - lng1);
            const A = Math.sin(dLat / 2) ** 2 + Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) * Math.sin(dLng / 2) ** 2;
            const distBetweenPoints = 2 * R * Math.asin(Math.sqrt(A));

            if (d1 + d2 < distBetweenPoints) {
                document.getElementById('results').innerText = "No valid points possible with the given distances.";
                return;
            }

            const midpointLat = (lat1 + lat2) / 2;
            const midpointLng = (lng1 + lng2) / 2;
            const results = [];

            const dMid1 = haversineFormula(lat1, lng1, midpointLat, midpointLng);
            const delta = Math.sqrt(d1 ** 2 - dMid1 ** 2);

            // Compute the two possible points (simplified math for geodesics)
            for (let sign of [1, -1]) {
                const possibleLat = midpointLat + sign * delta / R * (180 / Math.PI);
                const possibleLng = midpointLng + sign * delta / R * (180 / Math.PI) / Math.cos(toRadians(midpointLat));
                results.push({ lat: possibleLat, lng: possibleLng });
            }

            // Display results
            const resultsDiv = document.getElementById('results');
            resultsDiv.innerHTML = '';
            results.forEach((point, index) => {
                const para = document.createElement('p');
                para.innerText = `Point ${index + 1}: Latitude = ${point.lat.toFixed(6)}, Longitude = ${point.lng.toFixed(6)}`;
                resultsDiv.appendChild(para);
            });
        }


    const socket = io(); // Connect to the Socket.IO server
const map = L.map('map').setView([19.13294, 72.9153], 14); // Initialize the map

L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 19,
}).addTo(map);

const markers = {}; // Store markers for each sensor by ID
let sensors = <%- JSON.stringify(sensors) %>; // Initial sensors loaded from the server

// Initialize the map with existing sensors
sensors.forEach((sensor)=>{
    addOrUpdateSensor(sensor);
});

// Listen for real-time updates
socket.on('sensorUpdated', data => {
    console.log('Sensor update received:', data);
    const index = sensors.findIndex(s => s.sensorId === data.sensorId);
    if (data.action === 'add' || data.action === 'update' || true) {
        if (index !== -1) {
            // Update existing sensor in the array
            sensors[index] = data;
        } else {
            // Add new sensor to the array
            sensors.push(data);
        }
        addOrUpdateSensor(data);
        
    }
});


const ul = document.getElementById('device-hist-list');
  const downloadButton = document.getElementById('download-csv');
  const dateFilter = document.getElementById('date-filter');

  let dataList = [];
// Get the elements
const toggleButton = document.getElementById('toggleButton');
    const histDiv = document.getElementById('hist');

    // Listen for the toggle button state change
    toggleButton.addEventListener('change', () => {
      if (toggleButton.checked) {
        // Show the 'hist' div
        histDiv.style.display = 'block';
        // Emit the 'gethist' event to the server
        socket.emit('gethist');
        // console.log('Get history event emitted to server.');
      } else {
        // Hide the 'hist' div
        histDiv.style.display = 'none';
      }
    });


socket.on('histdatagot', data => {
    // Store the data for later use
    dataList = data;

    // Clear existing list items
    ul.innerHTML = '';

    // Display top items (limit by maxRows)
    const maxRows = 6;
    data.slice(0, maxRows).forEach(item => {
      const li = document.createElement('li');
      const content = `
        Sensor ID: ${item.sensorId}, 
        Type: ${item.type}, 
        Time: ${item.time}, 
        Distances History: ${item.distanceshistory.join(', ')}
      `;
      li.textContent = content;
      ul.appendChild(li);
    });
  });

  downloadButton.addEventListener('click', () => {
    const filterDate = dateFilter.value;
    let filteredData = dataList;

    // Filter by date if a filter is set
    if (filterDate) {
      filteredData = dataList.filter(item => new Date(item.time).toDateString() === new Date(filterDate).toDateString());
    }

    // Generate CSV content
    const csvContent = "data:text/csv;charset=utf-8," + 
      ["SensorID,Type,Time,Distance_x,Distance_y,Distance_z"]
      .concat(filteredData.map(item => {
        const distances = JSON.parse(item.distanceshistory);

        // Ensure there are exactly three values for x, y, z
        const distanceX = distances[0] ;
        const distanceY = distances[1] ;
        const distanceZ = distances[2] ;

        return `${item.sensorId},${item.type},${item.time},${distanceX},${distanceY},${distanceZ}`;
      }))
      .join("\n");

    // Create a downloadable link
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "device_history.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  });


// Add a new device to the list
socket.on("dist", (data) => {
    // console.log("HERE IN DIST");
    const Dev_Address = data.devAddress;
    const type = data.type;
    const t = data.time;
    const distances = data.distances;
    const deviceList = document.getElementById("device-list");
    console.log('inside dist')
    if (!document.getElementById(Dev_Address)) {
    //   socket.emit('test');
    const li = document.createElement("li");
    li.id = Dev_Address; // Use Dev_address as the element's ID
    li.textContent = `Address: ${Dev_Address},Type: ${type}, Time: ${t}, Distance: ${distances}`;
    deviceList.appendChild(li);
  }
});

// Remove a device from the list
socket.on("dist_not", (Dev_Address) => {
    const li = document.getElementById(Dev_Address);
    if (li) {
      console.log("HERE IN DIST_NOT")
    // console.log("Removed!!!!!!!!!11")
    const deviceList = document.getElementById("device-list");
    deviceList.removeChild(li);
  }
});


const myCustomColourRed = '#da142d'

const markerHtmlStylesRed = `
  background-color: ${myCustomColourRed};
  width: 1.5rem;
  height: 1.5rem;
  display: block;
  left: -0.75rem;
  top: -0.75rem;
  position: relative;
  border-radius: 1.5rem 1.5rem 0;
  transform: rotate(45deg);
  border: 1px solid #FFFFFF;
`;

const myCustomColourGreen = '#12b92e'

const markerHtmlStylesGreen = `
  background-color: ${myCustomColourGreen};
  width: 1.5rem;
  height: 1.5rem;
  display: block;
  left: -0.75rem;
  top: -0.75rem;
  position: relative;
  border-radius: 1.5rem 1.5rem 0;
  transform: rotate(45deg);
  border: 1px solid #FFFFFF;
`;



socket.on('Threshold', (Dev_Address) => {
    console.log('Threshold update received:', Dev_Address);

    // Find the corresponding marker for the given Dev_Address
    const marker = markers[Dev_Address];

    if (marker) {
        // Update the marker's color by changing its icon
        const newIcon = L.divIcon({
        className: "my-custom-pin",
        iconAnchor: [0, 24],
        labelAnchor: [-6, 0],
        popupAnchor: [0, -36],
        html: `<span style="${markerHtmlStylesRed}" />`
        })

        // Set the new icon to the marker
        marker.setIcon(newIcon);

        console.log(`Marker icon updated for Dev_Address: ${Dev_Address}`);
    } else {
        console.log(`No marker found for Dev_Address: ${Dev_Address}`);
    }
});

socket.on('Threshold1', (Dev_Address) => {
    console.log('Threshold update received:', Dev_Address);

    // Find the corresponding marker for the given Dev_Address
    const marker = markers[Dev_Address];

    if (marker) {
        // Update the marker's color by changing its icon
        const newIcon = L.divIcon({
        className: "my-custom-pin",
        iconAnchor: [0, 24],
        labelAnchor: [-6, 0],
        popupAnchor: [0, -36],
        html: `<span style="${markerHtmlStylesGreen}" />`
        })

        // Set the new icon to the marker
        marker.setIcon(newIcon);

        console.log(`Marker icon updated for Dev_Address: ${Dev_Address}`);
    } else {
        console.log(`No marker found for Dev_Address: ${Dev_Address}`);
    }
});


socket.on('sensorDelete', data => {
    console.log('Sensor delete update received:', data);
    // Remove the sensor from the array
    sensors = sensors.filter(sensor => sensor.sensorId !== data.sensorId);
    deleteSensor(data.sensorId);
});


// Add or update a sensor on the map
function addOrUpdateSensor(sensor) {
    const { sensorId, location } = sensor;
    if (markers[sensorId]) {
        map.removeLayer(markers[sensorId]);
    delete markers[sensorId];

    const marker = L.marker([sensor.location.lat, sensor.location.lng]).addTo(map);
markers[sensorId] = marker; // Save the marker in the markers object

marker.bindPopup(`<strong>${sensorId}</strong><br>(${sensor.location.lat}, ${sensor.location.lng})`);

// Add a click event listener to the marker
marker.on('click', () => {
    // Emit a request for real-time data for the clicked sensor
    socket.emit('getSensorData', sensor.sensorId);


    // Attach a new listener for real-time data
    socket.on('realTimeData', data => {
        console.log('Real-time data received:', data);

        // Check if the data is for the clicked sensor
        if (data.Dev_Address === sensor.sensorId) {
            // Generate a table from the received JSON data
            generateTable(data.data_sensor, sensor.sensorId);
            // Call the function to generate the lists as text
        const lists = generateLists(data.distHist);

        // Get the container element where we will display the text
        const container = document.getElementById('listContainer');

        // Join the lists into one string with newline characters
        container.textContent = lists.join('\n');
        }
    });
});


        
    } else {
        // Add a new marker    
        const marker = L.marker([location.lat, location.lng]).addTo(map);
        marker.bindPopup(`<strong>${sensorId}</strong><br>(${location.lat}, ${location.lng})`);
        markers[sensorId] = marker; // Store the marker for later updates

            // Add a click event listener to the marker
            marker.on('click', () => {
                // Emit a request for real-time data for the clicked sensor
                socket.emit('getSensorData', sensor.sensorId);
            });

            // Listen for real-time data from the server
            socket.on('realTimeData', data => {
                console.log('Real-time data received:', data);

                // Check if the data is for the clicked sensor
                if (data.Dev_Address === sensor.sensorId) {
                    // Generate a table from the received JSON data
                    console.log(1212)
                    generateTable(data.data_sensor, sensor.sensorId, sensor.type);
                }
            });
    }
}

// Remove a sensor's marker from the map
function deleteSensor(sensorId) {
    // Check if the marker exists in the markers object
    if (markers[sensorId]) {
        // Check if the marker is currently on the map
        if (map.hasLayer(markers[sensorId])) {
            map.removeLayer(markers[sensorId]); // Remove the marker from the map
            delete markers[sensorId]; // Delete the marker from the markers object
            console.log(`Sensor with ID ${sensorId} deleted successfully.`);
        } else {
            console.log(`Marker for sensor ID ${sensorId} is not on the map.`);
        }
    } else {
        console.log(`Sensor with ID ${sensorId} not found in the markers object.`);
    }
}

     function generateTable(jsonData, sensorId, type) {
    const container = document.getElementById('sensor-data-table-container') || createTableContainer();

    // Clear any existing content
    container.innerHTML = `<h3>Data for Sensor: ${sensorId}</h3>`;
    container.innerHTML += `<h3>Data for Sensor Type: ${type}</h3>`;

    // Create date and time filter inputs
    const filterContainer = document.createElement('div');
    filterContainer.innerHTML = `
        <label for="startDate">Start Date:</label>
        <input type="date" id="startDate">
        <input type="time" id="startTime">
        <label for="endDate">End Date:</label>
        <input type="date" id="endDate">
        <input type="time" id="endTime">
        <button id="applyFilter">Apply</button>
    `;
    container.appendChild(filterContainer);

    // Create the download button
    const downloadButton = document.createElement('button');
    downloadButton.textContent = 'Download as CSV';
    container.appendChild(downloadButton);

    // Define the fields to display
    const fields = ['Time', 'Fcnt', 'SF', 'Data'];

    // Create a table element
    const table = document.createElement('table');
    table.border = '1';
    container.appendChild(table);

    // Parse `Data` field to split into tuples
    function parseDataField(dataString) {
        return dataString
            .split('\r\n') // Split the string by newline characters
            .filter(line => line.trim()) // Remove empty lines
            .map(tupleString => tupleString.replace(/[()]/g, '').split(',').map(Number)); // Parse each tuple
    }

    // Function to filter data
    function filterData(data, startDate, startTime, endDate, endTime) {
        if (!startDate && !startTime && !endDate && !endTime) return data;

        const start = startDate
            ? new Date(`${startDate}T${startTime || '00:00'}`).getTime()
            : null;
        const end = endDate
            ? new Date(`${endDate}T${endTime || '23:59'}`).getTime()
            : null;

        return data.filter(row => {
            const rowTime = new Date(row.Time).getTime();
            return (!start || rowTime >= start) && (!end || rowTime <= end);
        });
    }

    // Function to generate the table
    function generateTable(data) {
        table.innerHTML = ''; // Clear the table content

        if (!data || data.length === 0) {
            table.innerHTML = '<p>No data available for this sensor.</p>';
            return;
        }

        // Create table headers
        const thead = table.createTHead();
        const headerRow = thead.insertRow();
        fields.forEach(field => {
            const th = document.createElement('th');
            th.textContent = field;
            headerRow.appendChild(th);
        });

        // Create table rows
        const tbody = table.createTBody();
        data.forEach(rowData => {
            const row = tbody.insertRow();
            fields.forEach(field => {
                const td = document.createElement('td');
                if (field === 'Data' && rowData[field]) {
                    // Display each tuple in a new line
                    const parsedData = parseDataField(rowData[field]);
                    td.innerHTML = parsedData.map(tuple => tuple.join(', ')).join('<br>');
                } else {
                    td.textContent = rowData[field] !== undefined ? rowData[field] : 'N/A'; // Handle missing fields
                }
                row.appendChild(td);
            });
        });
    }

    // Generate the table with all data initially
    generateTable(jsonData);

    // Add event listener to the apply button
    document.getElementById('applyFilter').addEventListener('click', () => {
        const startDate = document.getElementById('startDate').value;
        const startTime = document.getElementById('startTime').value;
        const endDate = document.getElementById('endDate').value;
        const endTime = document.getElementById('endTime').value;

        const filteredData = filterData(jsonData, startDate, startTime, endDate, endTime);
        generateTable(filteredData); // Regenerate the table with filtered data

        // Update the download button functionality
        updateDownloadButton(filteredData);
    });

    // Function to update the download button with filtered data
    function updateDownloadButton(data) {
    downloadButton.onclick = () => {
        let csvContent = '';

        // Add headers for the sensor metadata
        csvContent += `Data for Sensor: ${sensorId}\n`;
        csvContent += `Data for Sensor Type: ${type}\n\n`;

        // Add table headers, including separate columns for parsed Data tuples
        const extendedFields = ['Time', 'Fcnt', 'SF', 'Data_X', 'Data_Y', 'Data_Z'];
        csvContent += extendedFields.join(',') + '\n';

        // Add table rows
        data.forEach(rowData => {
            const otherFields = [
                rowData['Time'] || '',
                rowData['Fcnt'] || '',
                rowData['SF'] || ''
            ];

            if (rowData['Data']) {
                // Parse the `Data` field into tuples
                const parsedData = parseDataField(rowData['Data']);
                parsedData.forEach((tuple, index) => {
                    // Include other fields only for the first tuple, leave them empty for subsequent ones
                    const row = (index === 0 ? otherFields : ['', '', ''])
                        .concat(tuple)
                        .join(',');
                    csvContent += row + '\n';
                });
            } else {
                // If no `Data` field exists, add a single row with placeholders for the tuple
                csvContent += [...otherFields, 'N/A', 'N/A', 'N/A'].join(',') + '\n';
            }
        });

        // Create a blob and trigger download
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', `${sensorId}.csv`); // Name file with sensor ID
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
}

    updateDownloadButton(jsonData);
}

function createTableContainer() {
    const container = document.createElement('div');
    container.id = 'sensor-data-table-container';
    container.style.marginTop = '20px';
    document.body.appendChild(container);
    return container;
}



    </script>
    
</body>
</html>
