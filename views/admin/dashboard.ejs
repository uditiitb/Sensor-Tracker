<!DOCTYPE html>
<html lang="en">
<head>
    <title>Admin Dashboard</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css">
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <h3>Admin Dashboard</h3>
    <form action="/admin/add" method="POST">
        <input type="text" name="sensorId" placeholder="Sensor ID" required>
        <input type="number" name="lat" placeholder="Latitude" step="0.000001" required>
        <input type="number" name="lng" placeholder="Longitude" step="0.000001" required>
        <button type="submit">Add Sensor</button>
    </form>

    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Location</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% sensors.forEach(sensor => { %>
                <tr>
                    <td><%= sensor.sensorId %></td>
                    <td><%= sensor.location.lat %>, <%= sensor.location.lng %></td>
                    <td>
                        <form action="/admin/update/<%= sensor.id %>" method="POST">
                            <input type="text" name="name" value="<%= sensor.sensorId %>">
                            <input type="text" name="lat" value="<%= sensor.location.lat %>">
                            <input type="text" name="lng" value="<%= sensor.location.lng %>">
                            <button type="submit">Update</button>
                        </form>

                        <form action="/admin/delete/<%= sensor.id %>" method="POST" style="display: inline;">
                            <button type="submit" onclick="return confirm('Are you sure you want to delete this sensor?')">Delete</button>
                        </form>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
    <div id="map" style="height: 300px; width: 50%;"></div>

    <script>
        const socket = io(); // Connect to the Socket.IO server
        const map = L.map('map').setView([19.13294, 72.9153], 14); // Initialize the map

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
        }).addTo(map);

        const markers = {}; // Store markers for each sensor by ID

        // Initialize the map with existing sensors
        const sensors = <%- JSON.stringify(sensors) %>; // Data passed from the server
        console.log(sensors)
        sensors.forEach(sensor => {
            addOrUpdateSensor(sensor);
        });

        // Listen for real-time updates
        socket.on('sensorUpdated', data => {
            console.log('Sensor update received:', data);
            if (data.action === 'add' || data.action === 'update' || true) {
                addOrUpdateSensor(data);
            }
        });

        socket.on('sensorDelete',data => {
            console.log('Sensor delete update received:', data);
            deleteSensor(data.sensorId);
        })

        // Add or update a sensor on the map
        function addOrUpdateSensor(sensor) {
            const { sensorId, location } = sensor;
            if (markers[sensorId]) {
                // Update existing marker
                console.log('here1')
                const marker = markers[sensorId];
                marker.setLatLng([location.lat, location.lng]);
                marker.bindPopup(`<strong>${sensorId}</strong><br>(${location.lat}, ${location.lng})`);
            } else {
                // Add a new marker
                console.log('here2')
                const marker = L.marker([location.lat,location.lng]).addTo(map);
                marker.bindPopup(`<strong>${sensorId}</strong><br>(${location.lat}, ${location.lng})`);
                markers[sensorId] = marker; // Store the marker for later updates
            }
        }



        function deleteSensor(sensorId) {
            if (markers[sensorId]) {
                // Remove the marker from the map
                map.removeLayer(markers[sensorId]);

                // Remove the marker reference from the markers object
                delete markers[sensorId];

                console.log(`Sensor with ID ${sensorId} deleted successfully.`);
            } else {
                console.log(`Sensor with ID ${sensorId} not found.`);
            }
        }

        sensors.forEach(sensor => {
            const marker = L.marker([sensor.location.lat, sensor.location.lng]).addTo(map);
            marker.on('mouseover', () => {
                socket.emit('getSensorData', sensor.sensorId);
            });
            socket.on('realTimeData', data => {
                console.log('Real-time data received:', data);
                if (data.sensorId === sensor.sensorId) {
                    marker.bindPopup(`Id: ${sensor.sensorId}`).openPopup();
                }
            });
        });

        sensors.forEach(sensor => {
        // Add a marker for each sensor
        const marker = L.marker([sensor.location.lat, sensor.location.lng]).addTo(map);

        // Add a click event listener to the marker
        marker.on('click', () => {
            // Emit a request for real-time data for the clicked sensor
            socket.emit('getSensorData', sensor.sensorId);
        });

        // Listen for real-time data from the server
        socket.on('realTimeData', data => {
            console.log('Real-time data received:', data);

            // Check if the data is for the clicked sensor
            if (data.sensorId === sensor.sensorId) {
                // Generate a table from the received JSON data
                generateTable(data.data_sensor, sensor.sensorId);
            }
        });
    });

    /**
     * Generate a table from the JSON data and append it to a container in the HTML.
     * @param {Object} jsonData - Parsed JSON data from the server.
     * @param {String} sensorId - ID of the sensor.
     */
    function generateTable(jsonData, sensorId) {
        // Find or create the container for the table
        const container = document.getElementById('sensor-data-table-container') || createTableContainer();
        
        // Clear any existing content
        container.innerHTML = `<h3>Data for Sensor: ${sensorId}</h3>`;
        
        // Create the table
        const table = document.createElement('table');
        table.border = '1';

        // Create table headers
        const thead = table.createTHead();
        const headerRow = thead.insertRow();
        Object.keys(jsonData).forEach(key => {
            const th = document.createElement('th');
            th.textContent = key;
            headerRow.appendChild(th);
        });

        // Create table rows
        const tbody = table.createTBody();
        const dataRow = tbody.insertRow();
        Object.values(jsonData).forEach(value => {
            const td = document.createElement('td');
            td.textContent = value;
            dataRow.appendChild(td);
        });

        // Append the table to the container
        container.appendChild(table);
    }

    /**
     * Create a container for the sensor data table if it doesn't already exist.
     * @returns {HTMLElement} The created container element.
     */
    function createTableContainer() {
        const container = document.createElement('div');
        container.id = 'sensor-data-table-container';
        container.style.marginTop = '20px';
        document.body.appendChild(container);
        return container;
    }
    </script>
    
</body>
</html>
